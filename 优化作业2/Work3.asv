function [xm,fm,noi] = Work3(A,b,c)
clc,clear;
A=[ 1  1  1  0  0  0;
    1  2  0  1  0  0;
    1  0  0  0  1  0;
    0  1  0  0  0  1;  ]; 
b = []';
c=[-2  -  5  6]; 

[xm,fm,noi] = simplex_algorithm(A,b,c);
disp('最优解为：');
disp(xm);
disp('最优函数值为：');
disp(fm);
disp('迭代次数为：');
disp(noi);
end

%%主函数：
function [X,b,C_j,z]=simplex_algorithm(A,b,c)
format rat
%% 建立初始单纯形表
[m,n]=size(A); % 获取矩阵A的长和宽 即原有变量的个数
X=[A,eye(m),b];  %初始单纯形矩阵
C=[c,zeros(1,m)];
C_j=[c,zeros(1,m)]; %记录检验数
C_N=C_j(1:n);  %记录非基变量的价值系数矩阵
C_B=C_j(n+1:n+m); %记录基变量的价值系数矩阵
sita=zeros(1,n); %θ规则
id_B=(n+1:m+n); %基变量的索引
id_N=(1:n);  %非基变量的索引
k=0;%换入变量下标
l=0;%换出变量下标
%% 进入迭代
flag=0; % 若是无界解 则flag赋值为1 跳出所有循环
while ~all(C_j<=0) %若全部检验数为非正 ~all为假 退出循环 若存在检验数大于0 进入循环
    %% 判断是否为无界解
    for i=1:n
        if C_N(i)>0
            if all(X(:,id_N(i))<=0) % 若出现了技术系数全部小于0的情况,则条件为真
                disp('该线性规划问题有无界解');
                flag=1;
                break
            end      
        end
    end 
    if flag  % 若标记为无界解,则终止迭代,若不是,则继续进行
        break
    else
    %% 根据检验数中最大值所在列找到换入变量
    k=find(C_j==max(C_j)); %注意要找下标的操作
    g=find(X(:,k)>0);%保存ai>0的坐标
    %% θ规则 确定换出变量
    sita=(b(g,1)./X(g,k));%矩阵的点除 对应位置数字相除
    sita
    l=g(sita==min(sita));%找到对应换出变量 用sita最小值对应的下标查找g的下标对应的值
    %% 换入变量替换换出变量 非基变量与出基变量索引的对换
    id_N(id_N==k)=id_B(l);
    id_B(l)=k;
    %% 确定主元素坐标(l,k) 进行矩阵变换 
    m= size(X,1); %获取矩阵行数
    b = X(l,k); % 获取要变为1的数
    X(l,:)=X(l,:)/b; % 先把该行都除以这个数 使这个数为1
    for i = [1:l-1,l+1:m]  % m=1 i=[1:0,2:3],前面1：0相当于没元素 最终i=[2,3]
        X(i,:)= X(i,:)-X(i,k)*X(l,:); % 把对应列的其他数化为0,所在行其他数减去该行的数乘这个数
    end
    X
    %% 新的资源系数
    b=X(:,m+n+1);
    %% 价值系数矩阵的变化以及检验数的变化   
    C_B=C_j(id_B);%记录基变量的价值系数
    C_N=C_j(id_N); %记录非基变量的价值系数矩阵
    C_j(id_B)=zeros(1,m);
     C_j(id_N)=C_N-C_B*X(:,id_N);
    end
end
    C_N=C_j(id_N); %得到最后一次的非基变量的价值系数矩阵用于判断
    C_B=C(id_B); %得到最后一次的基变量的价值系数矩阵用于求最优值
    %% 无穷多最优解
    if ~all(C_N<0) && flag~=1
        disp('此线性规划问题有无穷多解')
        flag=2;
    end
     %% 最优解唯一的情况
     if flag==0
         disp('此线性规划问题有唯一的最优解')
     end
   z=C_B*b;
end

function [X] = turn_one(X,m,n)
l = size(X,1); %获取矩阵长
b = X(m,n); % 获取要变为1的数
X(m,:)=X(m,:)/b; % 先把该行都除以这个数 使这个数为1
for i = [1:m-1,m+1:l]  % m=1 i=[1:0,2:3],前面1：0相当于没元素 最终i=[2,3]
    X(i,:)= X(i,:)-X(i,n)*X(m,:); % 把对应列的其他数化为0,所在行其他数减去该行的数乘这个数
end
end